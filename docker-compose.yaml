version: '3.1'

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  article-api:
    build: .
    container_name: article-api
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    command: "sh -c 'npm run migration:run && npm run start:prod'"

volumes:
  redis-data:
  postgres-data:

networks:
  app-network:
    driver: bridge
